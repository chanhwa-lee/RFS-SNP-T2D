nseq = seq(10,500, by = 10)
plot(nseq, mudif, pch=4,type="o",col="#228B22",ylab="Frobenius difference",xlab="n")
par(new=T)
plot(nseq, Sdif,pch=0,type="o",col="#FF3030")
par(new=T)
plot(nseq, Rdif, pch=2,type="o",col="#009ACD")
legend(c("Xbar - mu","S - Sigma","R - population.cor"), cex=0.7, pch=c(2,0,4),col=c("#009ACD","#FF3030","#228B22"))
nseq = seq(10,500, by = 10)
plot(nseq, mudif, pch=4,type="o",col="#228B22")
par(new=T)
plot(nseq, Sdif,pch=0,type="o",col="#FF3030")
par(new=T)
plot(nseq, Rdif, pch=2,type="o",col="#009ACD")
legend(c("Xbar - mu","S - Sigma","R - population.cor"), cex=0.7, pch=c(2,0,4),col=c("#009ACD","#FF3030","#228B22"), ylab="Frobenius difference",xlab="n")
plot(nseq, mudif, pch=4,type="o",col="#228B22", ylab="Frobenius difference",xlab="n")
points(nseq, Sdif,pch=0,type="o",col="#FF3030", xlim=range(mudif,Sdif,Rdif), ylim=range(nseq))
plot(nseq, mudif, pch=4,type="o",col="#228B22", ylab="Frobenius difference",xlab="n", xlim=range(mudif,Sdif,Rdif), ylim=range(nseq))
range(nseq)
plot(nseq, mudif, pch=4,type="o",col="#228B22", ylab="Frobenius difference",xlab="n", xlim=range(mudif,Sdif,Rdif), ylim=range(nseq))
points(nseq, Sdif,pch=0,type="o",col="#FF3030", xlim=range(mudif,Sdif,Rdif), ylim=range(nseq))
plot(nseq, mudif, pch=4,type="o",col="#228B22", ylab="Frobenius difference",xlab="n", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
points(nseq, Sdif,pch=0,type="o",col="#FF3030", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
points(nseq, Rdif,pch=2,type="o",col="#009ACD", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
legend(c("Xbar - mu","S - Sigma","R - population.cor"), cex=0.7, pch=c(2,0,4),col=c("#009ACD","#FF3030","#228B22"))
for(n in seq(10,500, by = 10)){
X <- rmvnorm(n, mean= mu, sigma = Sigma)
Xbar = colMeans(X)
S = cov(X)
R = cov2cor(cov(X))
mudif <- c(mudif, sqrt(sum((Xbar - mu)**2)))
Sdif <- c(Sdif, sqrt(sum((S-Sigma)**2)))
Rdif <- c(Rdif, sqrt(sum((R-cov2cor(Sigma))**2)))
}
nseq = seq(10,500, by = 10)
plot(nseq, mudif, pch=4,type="o",col="#228B22", ylab="Frobenius difference",xlab="n", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
points(nseq, Sdif,pch=0,type="o",col="#FF3030", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
mudif <- c()
Sdif <- c()
Rdif <- c()
for(n in seq(10,500, by = 10)){
X <- rmvnorm(n, mean= mu, sigma = Sigma)
Xbar = colMeans(X)
S = cov(X)
R = cov2cor(cov(X))
mudif <- c(mudif, sqrt(sum((Xbar - mu)**2)))
Sdif <- c(Sdif, sqrt(sum((S-Sigma)**2)))
Rdif <- c(Rdif, sqrt(sum((R-cov2cor(Sigma))**2)))
}
nseq = seq(10,500, by = 10)
plot(nseq, mudif, pch=4,type="o",col="#228B22", ylab="Frobenius difference",xlab="n", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
points(nseq, Sdif,pch=0,type="o",col="#FF3030", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
points(nseq, Rdif,pch=2,type="o",col="#009ACD", ylim=range(mudif,Sdif,Rdif), xlim=range(nseq))
legend(right, c("Xbar - mu","S - Sigma","R - population.cor"), cex=0.7, pch=c(2,0,4),col=c("#009ACD","#FF3030","#228B22"))
legend("right", c("Xbar - mu","S - Sigma","R - population.cor"), cex=0.7, pch=c(2,0,4),col=c("#009ACD","#FF3030","#228B22"))
seq(10,500, by = 10)
n = 100
sample = matrix(0, nrow = n, ncol = 3)
for(i in 1:n){
X = runif(0,1)
Y = 0.3*runif(0,1) + 0.7* X
Z = 0.5*X + 0.5*Y
sample[i,] = c(X,Y,Z)
}
n = 100
sample = matrix(0, nrow = n, ncol = 3)
for(i in 1:n){
X <- runif(0,1)
Y <- 0.3*runif(0,1) + 0.7* X
Z <- 0.5*X + 0.5*Y
sample[i,] <- c(X,Y,Z)
}
c(X,Y,Z)
runif(0,1)
n = 100
sample = matrix(0, nrow = n, ncol = 3)
for(i in 1:n){
X <- runif(1)
Y <- 0.3*runif(1) + 0.7* X
Z <- 0.5*X + 0.5*Y
sample[i,] <- c(X,Y,Z)
}
sample
# 1) sample corr. coef
cov(sample[,1],sample[,2])
cov(sample[,1],sample[,3])
cov(sample[,2],sample[,3])
cor(sample[,1],sample[,3])
# 1) sample corr. coef
cor(sample[,1],sample[,2])
cor(sample[,1],sample[,3])
cor(sample[,2],sample[,3])
# 2) scatter
mfrow(par = c(1,3))
# 2) scatter
par(mfrow = c(1,3))
plot(sample[,1],sample[,2])
plot(sample[,1],sample[,3])
plot(sample[,2],sample[,3])
# 2) scatter
par(mfrow = c(1,3))
text(0.5,0.5,"First title",cex=2,font=2)
dev.off()
# 2) scatter
par(mfrow = c(1,3))
text("First title",cex=2,font=2)
plot(sample[,1],sample[,2])
plot(sample[,1],sample[,3])
plot(sample[,2],sample[,3])
text("First title",cex=2,font=2)
# 2) scatter
par(mfrow = c(2,2))
plot(sample[,1],sample[,2])
plot(sample[,1],sample[,3])
plot(sample[,2],sample[,3])
plot.new()
plot(sample[,1],sample[,2])
par(mfrow = c(1,1))
plot(sample[,1],sample[,2])
par(mfrow = c(2,2))
plot(sample[,1],sample[,2])
reg1 <- lm(sample[,1]~sample[,2])
abline(reg1)
plot(sample[,1],sample[,3])
reg2 <- lm(sample[,1]~sample[,3])
abline(reg2)
plot(sample[,2],sample[,3])
reg3 <- lm(sample[,2]~sample[,3])
abline(reg3)
# 1) sample corr. coef
cor(sample[,1],sample[,2])
cor(sample[,1],sample[,3])
cor(sample[,2],sample[,3])
par(mfrow = c(1,1))
# a)
qqplot(sample[,1])
# a)
qqnorm(sample[,1])
# a)
par(mfrow = c(2,2))
qqnorm(sample[,1])
qqline(sample[,1])
qqnorm(sample[,2])
qqline(sample[,2])
qqnorm(sample[,3])
qqline(sample[,3])
shapiro.test(sample[,3])
shapiro.test(sample[,2])
X = sample
Xc <- t(t(X) - colMeans(X)) # centered X
S <- cov(X)
Mdist <- sqrt( diag( Xc %*% solve(S) %*% t(Xc) ) )
qqplot( qchisq(ppoints(100), df = 3), Mdist^2)
S
R
Sigma
P
cov2cor(Sigma)
Sigma
S
cov2cor(S)
# a) (X,Y)|z ~ normal(mu.c, var.c) where
# mu.c = (mu.x,mu.y)^T - (sigma_xz, sigma_yz)^T*(sigma_zz)^-1*(z-mu.z)
# var.c = [(sigma_xx, sigma_xy),(sigma_yx, sigma_yy)] - (sigma_xz, sigma_yz)^T*(sigma_zz)^-1*(sigma_zx, sigma_zy)
Sigma
mu
mu[1:2]
t(mu[1:2])
mu[1:2]
# d)
X <- rmvnorm(1000, mean= mu, sigma = Sigma)
fit <- lm(X[,3] ~ X[,1]+X[,2])
summary(fit)
qnorm(1.96)
qnorm(0.05)
intratio <- function(n,p,m) sqrt(qf(0.95,p,n-p)*(n-1)*p/(n-p)) / qt(1-0.025/m,n-1)
intratio(15,2,2)
1/intratio(15,2,2)
1/intratio(15,4,4)
1/intratio(15,10,10)
intratio <- function(n,p,m) qt(1-0.025/m,n-1)/sqrt(qf(0.95,p,n-p)*(n-1)*p/(n-p))
intratio(15,10,10)
intratio(15,10,5)
intratio(15,10,4)
intratio(15,10,12)
intratio(15,10,100)
intratio(15,10,1000)
intratio(15,2,1000)
intratio(15,2,10)
intratio(15,10,100)
intratio(15,10,1000)
intratio(15,2,10)
intratio(15,10,10)
intratio(150,10,10)
intratio(1500,10,10)
intratio(150000,10,10)
library(mvtnorm)
p <- 2
mu <- c(5,10)
mu
Sigma <- matrix(c(4,3,
3,6), nrow = 2)
Sigma
n <- 100
X <- rmvnorm(n, mean= mu, sigma = Sigma) # A n x p normal data matrix
X
Xbar <- colMeans(X)
S <- cov(X)
# Compute Hoteling's T statistics (scaled appropriately to follow an F distribution)
T2 <- (n-p) / p * n / (n-1) *t(as.matrix(Xbar - mu)) %*% solve(S) %*% as.matrix(Xbar - mu)
T2
Fprob <- df(T2,p,n-p) # and the tail probability of F-distribution
# Comparison with a pre-packaged computation
library(ICSNP)
# Comparison with a pre-packaged computation
install.packages("ICSNP")
library(ICSNP)
a <- HotellingsT2(X, mu = mu, test = "f")
a$statistic
a$p.value
p <- 3
Sigma <- matrix(c(10,3,1,
3,6,1,
1,1,6), nrow = 3)
m <- 100
X <- rmvnorm(n = m , sigma = Sigma)
M <- t(X) %*% X # just one random matrix
# Now sample n = 100 many Wishart matrices
M.array <- rWishart(n = 500, df = m, Sigma = Sigma)
# Inspect the first two observations
M.array[,,1]
M.array
# Take a sample mean and (element-wise) variance and compare with their expected value.
apply(M.array,c(1,2),mean)
# Take a sample mean and (element-wise) variance and compare with their expected value.
apply(M.array,3,mean)
# Take a sample mean and (element-wise) variance and compare with their expected value.
apply(M.array,c(1,2),mean)
apply(M.array,c(1,2),var)
pop_mean <- m*Sigma
pop_var <- matrix(0, nrow = 3, ncol = 3)
for(i in 1:3){
for(j in 1:3){
pop_var[i,j] <- m*(Sigma[i,j]^2+Sigma[i,i]*Sigma[j,j])
}
}
pop_var
emp_mean <- apply(M.array,c(1,2),mean)
emp_var <- apply(M.array,c(1,2),var)
mean_dev = sum((pop_mean - emp_mean)**2)
mean_dev
n <- 500 # no.of sample Wishart variants
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
mean_dev = sum((pop_mean - emp_mean)**2)
n <- 500 # no.of sample Wishart variants
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_dev = sum((pop_mean - emp_mean)**2))
n <- 500 # no.of sample Wishart variants
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_dev = sum((pop_mean - emp_mean)**2))
n <- 500 # no.of sample Wishart variants
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_dev = sum((pop_mean - emp_mean)**2))
n <- 500 # no.of sample Wishart variants
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_dev = sum((pop_mean - emp_mean)**2))
n <- 500 # no.of sample Wishart variants
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_dev = sum((pop_mean - emp_mean)**2))
n <- 500 # no.of sample Wishart variants
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_frob_dev = sqrt(sum((pop_mean - emp_mean)**2)))
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_frob_dev = sqrt(sum((pop_mean - emp_mean)**2)))
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_frob_dev = sqrt(sum((pop_mean - emp_mean)**2)))
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_frob_dev = sqrt(sum((pop_mean - emp_mean)**2)))
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_frob_dev = sqrt(sum((pop_mean - emp_mean)**2)))
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_frob_dev = sqrt(sum((pop_mean - emp_mean)**2)))
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
(mean_frob_dev = sqrt(sum((pop_mean - emp_mean)**2)))
Wshart_dev(500,100)
Wshart_dev <- function(n,m){
# m : df of Wishart distn
# n : no.of sample Wishart variants
pop_mean <- m*Sigma
pop_var <- matrix(0, nrow = 3, ncol = 3)
for(i in 1:3){
for(j in 1:3){
pop_var[i,j] <- m*(Sigma[i,j]^2+Sigma[i,i]*Sigma[j,j])
}
}
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
return(sqrt(sum((pop_mean - emp_mean)**2)))
}
Wshart_dev(500,100)
Wshart_dev(500,100)
Wshart_dev(500,100)
Wshart_dev(500,100)
Wshart_dev(500,100)
Wshart_dev <- function(n,m,t){
# m : df of Wishart distn
# n : no.of sample Wishart variants
# t : replication number of obtaining deviance
pop_mean <- m*Sigma
pop_var <- matrix(0, nrow = 3, ncol = 3)
for(i in 1:3){
for(j in 1:3){
pop_var[i,j] <- m*(Sigma[i,j]^2+Sigma[i,i]*Sigma[j,j])
}
}
devrest <- 0
for(k in 1:t){
M.array <- rWishart(n = n, df = m, Sigma = Sigma)
emp_mean <- apply(M.array,c(1,2),mean)
devrest <- devrest + sqrt(sum((pop_mean - emp_mean)**2))
}
devrest <- devrest / t
return(devrest)
}
Wshart_dev(500,100,1)
Wshart_dev(500,100,1)
Wshart_dev(500,100,1)
Wshart_dev(500,100,1)
Wshart_dev(500,100,100)
Wshart_dev(500,100,100)
Wshart_dev(500,100,100)
Wshart_dev(500,100,100)
Wshart_dev(500,100,100)
Wshart_dev(500,100,100)
library(plotly)
install.packages("plotly")
library(plotly)
Wsdev.df <- data.frame()
Wsdev.df <- data.frame(n=c(),m=c(),dev=c())
Wsdev.df
Wshart_dev(500,100,100)
Wsdev.df <- data.frame(n=c(),m=c(),dev=c())
Wshart_dev(500,100,100)
Wsdev.df <- data.frame(n=c(),m=c(),dev=c())
nr = 1
for(n in seq(100,200,by=10)){
for(m in seq(100,200,by=10)){
Wsdev.df$n[nr] <- n
Wsdev.df$m[nr] <- m
Wsdev.df$dev[nr] <- Wshart_dev(n,m,100)
nr <- nr+1
}
}
Wshart_dev(500,100,100)
L = 20
Wsdev.df <- data.frame(n=rep(0,L**2),m=rep(0,L**2),dev=rep(0,L**2))
Wsdev.df
for(n in 10*(1:L)){
for(m in 10*(1:L)){
Wsdev.df$n[nr] <- n
Wsdev.df$m[nr] <- m
Wsdev.df$dev[nr] <- Wshart_dev(n,m,100)
nr <- nr+1
}
}
Wsdev.df
plot_ly(Wsdev.df)
plot_ly(Wsdev.df) %>% add_surface()
plot_ly(data = Wsdev.df, x = n, y = m, z = dev) %>% add_surface()
plot_ly(data = Wsdev.df, x = ~n, y = ~m, z = ~dev) %>% add_surface()
plot_ly(data = Wsdev.df, x = Wsdev.df$n, y = Wsdev.df$m, z = Wsdev.df$dev) %>% add_surface()
Wsdev.df$dev
str(Wsdev.df$)
str(Wsdev.df$z)
str(Wsdev.df$dev)
plot_ly(data = Wsdev.df, x = Wsdev.df$n, y = Wsdev.df$m, z = Wsdev.df$dev) %>% add_surface()
L = 100
Wsdev.mat <- matrix(0,nrow = L,ncol=L)
for(n in (1:L)){
for(m in (1:L)){
Wsdev.mat[n,m] <- Wshart_dev(n,m,100)
}
}
Wsdev.mat <- matrix(0,nrow = L, ncol=L)
Wsdev.mat
for(n in 1:L){
for(m in 1:L){
Wsdev.mat[n,m] <- Wshart_dev(n,m,100)
}
}
L = 100
Wsdev.mat <- matrix(0,nrow = L, ncol=L)
for(n in 1:L){
for(m in 1:L){
Wsdev.mat[n,m] <- Wshart_dev(n*100,m*100,100)
}
}
L = 10
Wsdev.mat <- matrix(0,nrow = L, ncol=L)
for(n in 1:L){
for(m in 1:L){
Wsdev.mat[n,m] <- Wshart_dev(n*10,m*10,100)
}
}
start.time <- Sys.time()
L = 10
Wsdev.mat <- matrix(0,nrow = L, ncol=L)
for(n in 1:L){
for(m in 1:L){
Wsdev.mat[n,m] <- Wshart_dev(n*10,m*10,100)
}
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
L = 20
Wsdev.mat <- matrix(0,nrow = L, ncol=L)
for(n in 1:L){
for(m in 1:L){
Wsdev.mat[n,m] <- Wshart_dev(n*10,m*10,100)
}
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
L = 50
Wsdev.mat <- matrix(0,nrow = L, ncol=L)
for(n in 1:L){
for(m in 1:L){
Wsdev.mat[n,m] <- Wshart_dev(n*10,m*10,100)
}
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
plot_ly(x = Wsdev.df$n, y = Wsdev.df$m, z = Wsdev.df$dev) %>% add_surface()
plot_ly(x = (1:L)*10, y = (1:L)*10, z = Wsdev.mat) %>% add_surface()
start.time <- Sys.time()
L = 50
Wsdev.mat <- matrix(0,nrow = L, ncol=L)
for(n in 1:L){
for(m in 1:L){
Wsdev.mat[n,m] <- Wshart_dev(n*100,m*100,100)
}
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
plot_ly(x = (1:L)*10, y = (1:L)*10, z = Wsdev.mat) %>% add_surface()
plot_ly(x = (1:L)*100, y = (1:L)*100, z = Wsdev.mat) %>% add_surface()
Wshart_dev(n = 500, m = 100,100)
Wshart_dev(n = 1000, m = 100,100)
Wshart_dev(n = 2000, m = 100,100)
Wshart_dev(n = 10, m = 100,100)
Wshart_dev(n = 100, m = 100,100)
Wshart_dev(n = 200, m = 100,100)
Wshart_dev(n = 300, m = 100,100)
Wshart_dev(n = 400, m = 100,100)
Wshart_dev(n = 400, m = 200,100)
Wshart_dev(n = 400, m = 300,100)
Wshart_dev(n = 400, m = 400,100)
Wshart_dev(n = 400, m = 500,100)
Wshart_dev(n = 400, m = 600,100)
Wshart_dev(n = 400, m = 700,100)
MAGMA0.05 <- read.table("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA/0.05/0.05 pathway.csv")
MAGMA0.05 <- read.table("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA/0.05/0.05 pathway.xlsx")
MAGMA0.05
MAGMA0.05 <- read.table("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA/0.05/0.05 pathway.csv")
View(MAGMA0.05)
MAGMA0.05 <- read.csv("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA/0.05/0.05 pathway.csv")
View(MAGMA0.05)
MAGMA0.05$P
MAGMA0.05$FDR <- p.adjust(MAGMA0.05$P, 'fdr')
View(MAGMA0.05)
GSASNP0.05 <- read.csv("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/gsasnp2/gsasnp2-windows-gui/pval0.05/pathway result p-value 0.05.csv")
View(GSASNP0.05)
GSASNP0.05$FDR <- p.adjust(GSASNP0.05$p.value, 'fdr')
View(GSASNP0.05)
getwd()
write.csv(MAGMA0.05, "C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA0.05.csv")
write.csv(GSASNP0.05, "C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/GSASNP0.05.csv")
p
MAGMA0.01 <- read.csv("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA/0.01/0.01 pathway.csv")
MAGMA0.01
MAGMA0.01$FDR <- p.adjust(MAGMA0.01$P, 'fdr')
write.csv(MAGMA0.01, "C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA0.05.csv")
write.csv(MAGMA0.01, "C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA0.01.csv")
setwd("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway")
coxresultRFS <- read.table("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/SNPdata/CoxSNP_RFS_o.coxph", header = T)
sum(coxresultRFS$PVALUE_INTER.TERM < 10^-3) # 489
# p-value < 0.001 significant
RSID_0.001 <- coxresultRFS[which(coxresultRFS$PVALUE_INTER.TERM < 10^-3),c(1,8)] # 489
write.csv(RSID_0.001, "RSID_0.001.csv")
write.txt(RSID_0.001, "RSID_0.001.csv")
MAGMA0.001 <- read.csv("C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA/0.001/0.001 pathway.csv")
MAGMA0.001$FDR <- p.adjust(MAGMA0.001$P, 'fdr')
write.csv(MAGMA0.01, "C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA0.001.csv")
write.csv(MAGMA0.001, "C:/Users/LCH/Desktop/Undergraduate Internship/Ansan, Ansung Cohort T2D/Workstation/SNP, RFS interaction on T2D/pathway/MAGMA0.001.csv")
